package menu

import (
	"BOTPROMICK/Utilities"
	"BOTPROMICK/db"
	"BOTPROMICK/db/models/user"
	"encoding/binary"
	"encoding/hex"
	"fmt"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func HandleStartCommand(botCtx *user.BotContext) {
	state := botCtx.GetUserState()
	botCtx.UpdateUserLevel(0)
	var rows [][]tgbotapi.InlineKeyboardButton
	if botCtx.Message != nil {
		MainArgument(botCtx, botCtx.Message.CommandArguments())
	}
	if !botCtx.User.Registered {
		HandleRegister(botCtx)
		return
	}
	MainText := "<b>ü§ñ </b>\n\n"
	MainText += "‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ûï\n"
	MainText += fmt.Sprintf("‚îÉ  üë§ <b>%s</b>\n", botCtx.User.FullName)
	MainText += fmt.Sprintf("‚îÉ  üí∞ <b>–ë–∞–ª–∞–Ω—Å: <code>%s</code></b>\n", Utilities.ConvertToFancyStringFloat(fmt.Sprintf("%f", float64(botCtx.User.Balance/100))))
	if botCtx.User.UserNetwork != nil {
		network := botCtx.User.UserNetwork.Network(db.DB)
		if network == nil {
			fmt.Print("–ö–∞–∫–æ–≥–æ —Ö—É—è?")
			return
		}
		if botCtx.User.UserNetwork.Confirmed {
			MainText += fmt.Sprintf("‚îÉ  ‚úçÔ∏è <b>–°–µ—Ç—å: %s</b>\n", network.Title)
			MainText += "‚îÉ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ûï\n"
			MainText += "‚îÉ  <b>üìä–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–¥–∞–∂:</b>\n"
			MainText += fmt.Sprintf("‚îÉ  ‚≠êÔ∏è <b>–ù–∞ —Å–µ—Ç—å:</b> <code>%s</code>\n", Utilities.ConvertToFancyString(1))
			MainText += fmt.Sprintf("‚îÉ  üëÄ <b>–õ–∏—á–Ω—ã—Ö:</b> <code>%s</code>\n", Utilities.ConvertToFancyString(1))
			if botCtx.User.UserNetwork.CanSell {
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞", "NewSale"),
					tgbotapi.NewInlineKeyboardButtonData("–ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏", "MySales"),
				))
			} else {
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏", "MySales"),
				))
			}
			var row []tgbotapi.InlineKeyboardButton
			if botCtx.User.UserNetwork.CanInviteUser {
				row = append(row, tgbotapi.NewInlineKeyboardButtonData("–ê–≥–µ–Ω—Ç—ã —Å–µ—Ç–∏", "NetworkAgents"))
			}
			if botCtx.User.UserNetwork.CanViewAllSales {
				row = append(row, tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–¥–∞–∂–∏ —Å–µ—Ç–∏", "NetworkSales"))
			}
			if len(row) != 0 {
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(row...))
			}
			if botCtx.User.UserNetwork.CanEditNetwork {
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏", "NetworkSettingsName"),
				))
			}
		} else {
			MainText += "‚îÉ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ûï\n"
			MainText += fmt.Sprintf("‚îÉ  ‚úçÔ∏è <b>–°–µ—Ç—å: %s</b>\n", network.Title)
			MainText += "‚îÉ  <code>‚≠ïÔ∏è –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–µ—Ä–∂–¥–µ–Ω–∏—è</code>\n"
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", "Cancel"),
			))
		}
	} else {
		MainText += "‚îÉ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ûï\n"
		MainText += "‚îÉ  <code>‚≠ïÔ∏è –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Å–µ—Ç–∏</code>\n"
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í—Å—Ç—É–ø–∏—Ç—å –≤ —Å–µ—Ç—å", "JoinNetwork"),
			tgbotapi.NewInlineKeyboardButtonData("–°–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å", "NewNetwork"),
		))
	}
	MainText += "‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ûï\n"
	if state.MessageID == 0 {
		msg := tgbotapi.NewMessage(botCtx.TelegramID, MainText)
		msg.ParseMode = "HTML"
		msg.DisableWebPagePreview = true
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
		botCtx.SendMessage(msg)
	} else {
		msg := tgbotapi.NewEditMessageTextAndMarkup(botCtx.TelegramID, state.MessageID, MainText, tgbotapi.NewInlineKeyboardMarkup(rows...))
		msg.DisableWebPagePreview = true
		msg.ParseMode = "HTML"
		botCtx.Ctx.BotAPI.Send(msg)
	}
}

func MainArgument(botCtx *user.BotContext, arg string) {
	args := strings.Split(arg, "_")
	switch args[0] {
	case "netId":
		var msgText string
		if len(args) != 2 {
			msgText = "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"
			msg := tgbotapi.NewMessage(botCtx.TelegramID, msgText)
			botCtx.SendMessage(msg)
			return
		}
		bytes, err := hex.DecodeString(args[1])
		if err != nil || len(bytes) < 4 {
			msgText = "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"
			msg := tgbotapi.NewMessage(botCtx.TelegramID, msgText)
			botCtx.SendMessage(msg)
			return
		}
		NetworkIdPlusBillion := binary.BigEndian.Uint32(bytes)
		if NetworkIdPlusBillion < 1_000_000_000 {
			msgText = "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"
			msg := tgbotapi.NewMessage(botCtx.TelegramID, msgText)
			botCtx.SendMessage(msg)
			return
		}
		NetworkId := NetworkIdPlusBillion - 1_000_000_000
		Network := user.GetNetworkById(db.DB, uint(NetworkId))
		if Network == nil {
			msgText = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
			msg := tgbotapi.NewMessage(botCtx.TelegramID, msgText)
			botCtx.SendMessage(msg)
			return
		}
		if err := Network.NewUser(db.DB, botCtx.User, false); err != nil {
			msgText = err.Error()
			msg := tgbotapi.NewMessage(botCtx.TelegramID, msgText)
			botCtx.SendMessage(msg)
			return
		}
		msgText = fmt.Sprintf("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Å–µ—Ç—å: %s", Network.Title)
		msg := tgbotapi.NewMessage(botCtx.TelegramID, msgText)
		botCtx.SendMessage(msg)
		return
	}
}
