package menu

import (
	"BOTPROMICK/Utilities"
	"BOTPROMICK/db"
	"BOTPROMICK/db/models/user"
	"encoding/binary"
	"encoding/hex"
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func NetworkAgents(botCtx *user.BotContext) {
	botCtx.UpdateUserLevel(2)
	Agents(botCtx, true)
}
func NetworkAgentsWaitForComfirmed(botCtx *user.BotContext) {
	botCtx.UpdateUserLevel(3)
	Agents(botCtx, false)
}

type AgentsPages struct {
	CurrentPage       uint
	CountOfPage       uint
	TotalCounOfAgents int64
	Pages             [][]struct {
		FullName string
		UserID   uint
		Name     string
		IsOwner  bool
		tgID     int64
	}
}

func Agents(botCtx *user.BotContext, confirmed bool) {
	state := botCtx.GetUserState()
	if botCtx.User.UserNetwork != nil && botCtx.User.UserNetwork.CanInviteUser {
		network := botCtx.User.UserNetwork.Network(db.DB)
		if network == nil {
			return
		}
		if confirmed {

		} else {
			if botCtx.CallbackQuery != nil {
				data := strings.Split(botCtx.CallbackQuery.Data, "_")
				switch data[0] {
				case "—Åonfirm":
					if len(data) == 2 {
						userTGID, err := strconv.ParseInt(data[1], 10, 64)
						if err != nil {
							return
						}
						User, err := user.GetUser(db.DB, userTGID, "", "", "")
						if err != nil {
							return
						}
						if User.UserNetwork == nil || User.UserNetwork.NetworkID != network.ID || User.UserNetwork.Confirmed {
							return
						}
						User.UserNetwork.Confirmed = true
						db.DB.Save(User.UserNetwork)
						botCtx.Ctx.BotAPI.Send(tgbotapi.NewMessage(userTGID, "–í–∞—Å –ø—Ä–∏–Ω—è–ª–∏ –≤ —Å–µ—Ç—å!"))
						delete(state.Data, "AgentsPages")
						NetworkAgents(botCtx)
						return
					}
				case "reject":
					if len(data) == 2 {
						userTGID, err := strconv.ParseInt(data[1], 10, 64)
						if err != nil {
							return
						}
						User, err := user.GetUser(db.DB, userTGID, "", "", "")
						if err != nil {
							return
						}
						if User.UserNetwork == nil || User.UserNetwork.Confirmed {
							return
						}
						err = network.RemoveUser(db.DB, User, botCtx.Ctx.BotAPI, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Å–µ—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
						if err != nil {
							fmt.Print(err)
						}
						delete(state.Data, "AgentsPages")
						NetworkAgents(botCtx)
						return

					}
				}

			}
		}
		const UsersPerPage = 8

		networkIDBytes := make([]byte, 4)
		binary.BigEndian.PutUint32(networkIDBytes, uint32(network.ID+1_000_000_000))
		networkCode := hex.EncodeToString(networkIDBytes)

		_AgentsPages, exist := state.Data["AgentsPages"].(AgentsPages)
		if !exist {
			Agents, err := network.GetAllUsers(db.DB, confirmed)
			if err != nil {
				return
			}
			_AgentsPages.TotalCounOfAgents = int64(len(Agents))
			_AgentsPages.Pages = make([][]struct {
				FullName string
				UserID   uint
				Name     string
				IsOwner  bool
				tgID     int64
			}, 0, 10)

			for i, agent := range Agents {
				pageIndex := i / UsersPerPage
				if pageIndex >= len(_AgentsPages.Pages) {
					_AgentsPages.Pages = append(_AgentsPages.Pages, make([]struct {
						FullName string
						UserID   uint
						Name     string
						IsOwner  bool
						tgID     int64
					}, 0, UsersPerPage))
				}

				_AgentsPages.Pages[pageIndex] = append(_AgentsPages.Pages[pageIndex], struct {
					FullName string
					UserID   uint
					Name     string
					IsOwner  bool
					tgID     int64
				}{
					UserID:   agent.UserID,
					Name:     agent.Username,
					IsOwner:  agent.IsOwner,
					FullName: agent.FullName,
					tgID:     agent.TgID,
				})
			}

			_AgentsPages.CountOfPage = uint(len(_AgentsPages.Pages))
		}
		var rows [][]tgbotapi.InlineKeyboardButton
		if len(_AgentsPages.Pages) != 0 || int(_AgentsPages.CurrentPage) < len(_AgentsPages.Pages) {

			for i, agent := range _AgentsPages.Pages[_AgentsPages.CurrentPage] {
				label := agent.FullName
				if agent.Name != "" {
					label += fmt.Sprintf(" (@%s)", agent.Name)
				}
				if agent.IsOwner {
					label += " üëë"
				}
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(label, fmt.Sprintf("Agent_%d_%d", _AgentsPages.CurrentPage, i)),
				))
			}

			var showPrev, showNext bool
			if _AgentsPages.CountOfPage > 0 {
				showPrev = _AgentsPages.CurrentPage > 0
				showNext = _AgentsPages.CurrentPage+1 < _AgentsPages.CountOfPage
			}

			var row []tgbotapi.InlineKeyboardButton
			if showPrev {
				row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è", "page_Prev"))
			}
			if showNext {
				row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚ñ∂Ô∏è", "page_next"))
			}
			if len(row) > 0 {
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(row...))
			}
		}
		var msgText string

		if confirmed {
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (%d)", network.CountOfUser-_AgentsPages.TotalCounOfAgents), "usersWaitForComfirmed")))
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back")))
			msgText = fmt.Sprintf("üîë –ö–æ–¥ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Å–µ—Ç—å: <i><code>%s</code></i>\n\n"+
				"üìé –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: \n<i><code>https://t.me/%s?start=netId_%s</code></i>\n\n"+
				"üë• –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ —Å–µ—Ç–∏:",
				networkCode, botCtx.Ctx.BotAPI.Self.UserName, networkCode)
		} else {
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("¬´ –Ω–∞–∑–∞–¥", "back")))
			msgText = "üë• –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:"
		}
		if state.MessageID == 0 {
			msg := tgbotapi.NewMessage(botCtx.TelegramID, msgText)
			msg.ParseMode = "HTML"
			msg.DisableWebPagePreview = true
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
			botCtx.SendMessage(msg)
		} else {
			msg := tgbotapi.NewEditMessageTextAndMarkup(botCtx.TelegramID, state.MessageID, msgText, tgbotapi.NewInlineKeyboardMarkup(rows...))
			msg.DisableWebPagePreview = true
			msg.ParseMode = "HTML"
			botCtx.Ctx.BotAPI.Send(msg)
		}

		state.Data["AgentsPages"] = _AgentsPages
	}
}

func ConFirmUser(botCtx *user.BotContext, page, Index int) {
	state := botCtx.GetUserState()
	_AgentsPages, exist := state.Data["AgentsPages"].(AgentsPages)
	if !exist {
		NetworkAgentsWaitForComfirmed(botCtx)
	}
	Agent := _AgentsPages.Pages[page][Index]
	var rows [][]tgbotapi.InlineKeyboardButton
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", fmt.Sprintf("—Åonfirm_%d", Agent.tgID)),
		tgbotapi.NewInlineKeyboardButtonData("–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", fmt.Sprintf("reject_%d", Agent.tgID)),
	))
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("¬´ –Ω–∞–∑–∞–¥", "hui")))
	msgText := fmt.Sprintf("<b><i><a href='https://t.me/%s'>üë§ %s</a></i></b>", Agent.Name, Agent.FullName)
	msg := tgbotapi.NewEditMessageTextAndMarkup(
		botCtx.TelegramID,
		state.MessageID,
		msgText,
		tgbotapi.NewInlineKeyboardMarkup(rows...),
	)
	msg.ParseMode = "HTML"
	if _, err := botCtx.Ctx.BotAPI.Send(msg); err != nil {
		fmt.Println(err)
	}
}

func EditUser(botCtx *user.BotContext, page, Index int) {
	state := botCtx.GetUserState()
	botCtx.UpdateUserLevel(6)
	_AgentsPages, exist := state.Data["AgentsPages"].(AgentsPages)
	if !exist {
		NetworkAgents(botCtx)
	}
	Agent := _AgentsPages.Pages[page][Index]
	User, err := user.GetUser(db.DB, Agent.tgID, "", "", "")
	if err != nil {
		return
	}
	msgText := fmt.Sprintf("<b><i><a href='https://t.me/%s'>üë§ %s</a></i></b>", User.Username, User.FullName)
	msgText += fmt.Sprintf("üí∞ <b>–ë–∞–ª–∞–Ω—Å: <code>%s</code></b>\n\n", Utilities.ConvertToFancyStringFloat(fmt.Sprintf("%f", float64(User.Balance/100))))
	msgText += "<b>üìä–ü—Ä–æ–¥–∞–∂:</b>\n"
	msgText += fmt.Sprintf("‚≠êÔ∏è <b>–°–µ–≥–æ–¥–Ω—è:</b> <code>%s</code>\n", Utilities.ConvertToFancyString(1))
	msgText += fmt.Sprintf("üëÄ <b>–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b> <code>%s</code>\n", Utilities.ConvertToFancyString(1))
	var rows [][]tgbotapi.InlineKeyboardButton
	sufixs := [4]string{"‚ùå", "‚ùå", "‚ùå", "‚ùå"}
	for i, sufix := range [...]bool{
		User.UserNetwork.CanSell,
		User.UserNetwork.CanInviteUser,
		User.UserNetwork.CanViewAllSales,
		User.UserNetwork.CanEditNetwork,
	} {
		if sufix {
			sufixs[i] = "‚úÖ"
		}
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–î–µ–ª–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ "+sufixs[0], "hui")))
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ—Å–º–æ—Ç—Ä/–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ "+sufixs[1], "hui")))
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–∂ —Å–µ—Ç–∏ "+sufixs[2], "hui")))
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ "+sufixs[3], "hui")))
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("¬´ –Ω–∞–∑–∞–¥", "hui")))

}
